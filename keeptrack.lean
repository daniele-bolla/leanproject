import Mathlib
import Mathlib.Topology.Connected.Basic
import Mathlib.Topology.Order
import Mathlib.Analysis.InnerProductSpace.PiL2

open Topology Filter Set Order

def IsInterval (s : Set ‚Ñù) : Prop :=
  ‚àÄ {x y : ‚Ñù}, x ‚àà s ‚Üí y ‚àà s ‚Üí ‚àÄ z, x ‚â§ z ‚Üí z ‚â§ y ‚Üí z ‚àà s

def PosReal := Set.Ioi (0 : ‚Ñù)
noncomputable def sinCurve := fun x ‚Ü¶ (x, Real.sin (x‚Åª¬π))

def S : Set (‚Ñù √ó ‚Ñù) := (sinCurve) '' PosReal

def Z : Set (‚Ñù √ó ‚Ñù) := { (0, 0) }

def T : Set (‚Ñù √ó ‚Ñù) := S ‚à™ Z

-- T is Not Path-connected

local instance : Fact ((0 : ‚Ñù) ‚â§ 1) := ‚ü®by linarith‚ü©
noncomputable instance : CompleteLattice unitInterval := by infer_instance

  def z : ‚Ñù√ó‚Ñù := (0, 0)
  noncomputable def w_x: ‚Ñù := (2)‚Åª¬π
  noncomputable def w : ‚Ñù√ó‚Ñù := sinCurve w_x
  lemma hz : z ‚àà T := by
    right
    simp [Z]
    rfl
  lemma hw : w ‚àà T := by
    rw [T,S]
    left
    simp only [Set.mem_image]
    use w_x
    constructor
    ¬∑ unfold w_x PosReal Set.Ioi
      norm_num
    ¬∑ trivial

/-- The Euclidean norm of a vector in ‚Ñù¬≤ is greater than or equal to the absolute value of its first component -/
theorem norm_ge_abs_component_fst {a b : ‚Ñù} : ‚Äñ(a, b)‚Äñ ‚â• |a| := by
  -- Definition of norm squared in ‚Ñù¬≤
  have norm_squared : ‚Äñ(a, b)‚Äñ^2 = a^2 + b^2 := by rfl

  -- Since b¬≤ ‚â• 0, we have a¬≤ + b¬≤ ‚â• a¬≤
  have sum_ge_component : a^2 + b^2 ‚â• a^2 := by
    apply add_le_add_left
    exact sq_nonneg b

  -- Apply square root to both sides
  have sqrt_ineq : ‚Äñ(a, b)‚Äñ ‚â• sqrt(a^2) := by
    rw [‚Üênorm_squared]
    apply Real.sqrt_le_sqrt
    ¬∑ exact sum_ge_component

  -- Use sqrt(x¬≤) = |x|
  rw [Real.sqrt_sq_eq_abs] at sqrt_ineq
  exact sqrt_ineq

/-- The Euclidean norm of a vector in ‚Ñù¬≤ is greater than or equal to the absolute value of its second component -/
lemma norm_ge_abs_component_snd {a b : ‚Ñù} : ‚Äñ(a, b)‚Äñ ‚â• |b| := by sorry

lemma xcoordPathContinuous (hPath : unitInterval ‚Üí ‚Ñù√ó‚Ñù) (hCont : Continuous hPath) : Continuous (fun t => (hPath t).1) :=
  continuous_fst.comp hCont

noncomputable def x_SeqPosPeak := fun (k : ‚Ñï) => 2/((4 * k + 1) * Real.pi) -- maybe i can directly define it in [0,a] = intervalAZero
lemma h_SinPosPeak : ‚àÄ k : ‚Ñï, k ‚â• 1 ‚Üí Real.sin ((x_SeqPosPeak k)‚Åª¬π) = 1 := by -- i don't need to show this for each x-values but only in the contraddicion
  intro k hk
  calc Real.sin ((x_SeqPosPeak k)‚Åª¬π) = Real.sin (((4 * k + 1) * Real.pi)/2) := by
        unfold x_SeqPosPeak
        field_simp
      _ = Real.sin (Real.pi/2 + 2*k*Real.pi) := by
        field_simp
        ring_nf
      _ = Real.sin (Real.pi/2 + k*(2*Real.pi)) := by
        ring_nf
      _ = Real.sin (Real.pi/2) := by
        rw [Real.sin_add_nat_mul_two_pi]
      _ = 1 := by
        exact Real.sin_pi_div_two

lemma xSeq_tendsto_zero : Tendsto x_SeqPosPeak atTop (ùìù 0) := by
  unfold x_SeqPosPeak
  have h‚ÇÅ : Tendsto (fun n : ‚Ñï => (n) * Real.pi) atTop atTop := by
    apply Filter.Tendsto.atTop_mul_const'
    ¬∑ exact Real.pi_pos
    ¬∑ exact tendsto_natCast_atTop_atTop
  have h‚ÇÇ : Tendsto (fun n : ‚Ñï => n * 4 + 1) atTop atTop := by
    have h‚ÇÉ : Tendsto (fun n : ‚Ñï => n * 4 ) atTop atTop := by
      apply Filter.Tendsto.atTop_mul_const'
      ¬∑ exact (by norm_num : 4 > 0)
      ¬∑ exact tendsto_natCast_atTop_atTop
    sorry
  sorry

lemma TisNotPathConnSup : ¬¨ (IsPathConnected T)  := by
  -- Assume we hava a path from z= (0, 0) to w=(x, sin(1/x))
  -- for some x > 0
  intro hPathConn
  apply IsPathConnected.joinedIn at hPathConn
  specialize hPathConn z hz w hw
  let hPath := JoinedIn.somePath hPathConn

  -- consider the xcoordinate map wich is conituous
  -- the composition of the path with the xcoordinate map is continuous
  let xcoordPath := fun t => (hPath t).1
  have xcoordPathContinuous : Continuous (xcoordPath : unitInterval ‚Üí ‚Ñù) := by
    apply Continuous.comp
    ¬∑ exact continuous_fst
    ¬∑ exact hPath.continuous


  -- let t‚ÇÄ the last time the path is on the y-axis
  let A : Set unitInterval := { t | (hPath t).1 = 0 }
  let t‚ÇÄ : unitInterval := sSup A

  -- h_xcoordPathAtZeroEqZero = 0
    -- (3.1) let A = {t | xcoordPath t = 0}
    -- A is a closed set in unitInterval
    -- since it is the preimage of a closed set under a continuous function
    -- hence it is compact
    -- since unitInterval is compact
    -- hence it is closed
  have h_t‚ÇÄ_mem : t‚ÇÄ ‚àà A :=
    have A_nonempty : A.Nonempty := by
      use 0
      have h_xcoordPath0 : xcoordPath 0 = 0 := by
        simp only [xcoordPath]
        rw [hPath.source]
        rfl
      exact h_xcoordPath0
    have A_closed : IsClosed A := isClosed_singleton.preimage xcoordPathContinuous
    IsCompact.sSup_mem A_closed.isCompact A_nonempty
  have h_xcoordPathAtZeroEqZero : xcoordPath t‚ÇÄ = 0 := h_t‚ÇÄ_mem

  -- the path at t‚ÇÄ is (0, 0) (not so sure of this proof)
  have hPathT‚ÇÄ: hPath t‚ÇÄ = z := by
    unfold z
    apply Prod.ext_iff.mpr

    have hPathT‚ÇÄIsInT : hPath t‚ÇÄ ‚àà T := by
      exact hPathConn.somePath_mem t‚ÇÄ

    have hPathT‚ÇÄ_x_is_0 : (hPath t‚ÇÄ).1 = 0 := by
      exact h_xcoordPathAtZeroEqZero

    unfold T at hPathT‚ÇÄIsInT

    constructor
    ¬∑ apply h_xcoordPathAtZeroEqZero
    ¬∑cases hPathT‚ÇÄIsInT with
    | inl hS =>
        exfalso

        obtain ‚ü®xPosreal, hxInPosReal, h_eq_path‚ü© := hS
        let x_val : ‚Ñù := xPosreal
        have hx_valPos : x_val > 0 := by
         dsimp [x_val] at *
         dsimp [PosReal] at hxInPosReal
         simpa using hxInPosReal

        have hPath_x_eq_x_val : (hPath t‚ÇÄ).1 = x_val := by
          simpa [sinCurve, x_val] using
          (congrArg Prod.fst h_eq_path).symm


        rw [hPath_x_eq_x_val] at hPathT‚ÇÄ_x_is_0
        linarith [hx_valPos, hPathT‚ÇÄ_x_is_0]

    | inr hZ =>

        have hZ_eq : hPath t‚ÇÄ = (0, 0) := by
          simpa [Z] using hZ

        have hPathT‚ÇÄ_y_is_0 : (hPath t‚ÇÄ).2 = 0 := by
          simpa using congrArg Prod.snd hZ_eq

        exact hPathT‚ÇÄ_y_is_0

  -- (3.2) let Œµ = 1/ 2, by continuity of the path, we can find a Œ¥ > 0 such that
  -- for all t in [t‚ÇÄ, t‚ÇÄ + Œ¥], ||p(t) - p(t‚ÇÄ)|| < 1/2
  -- hence the path is in a ball of radius 1/2 around (0, 0)

  have epsDeltaBoundAtT‚ÇÄ : ‚àÉ Œ¥ > 0, ‚àÄ t : unitInterval, dist t t‚ÇÄ < Œ¥ ‚Üí
    dist (hPath t) (hPath t‚ÇÄ) < 1/2 := by
    have hTendstoEventually := Metric.tendsto_nhds.mp (hPath.continuousAt t‚ÇÄ)
    have hEventually : ‚àÄ·∂† (t : unitInterval) in ùìù t‚ÇÄ, dist (hPath t) (hPath t‚ÇÄ) < 1/2 := by
      specialize hTendstoEventually (1/2)
      apply hTendstoEventually
      norm_num
    exact Metric.eventually_nhds_iff.mp hEventually

  obtain ‚ü®Œ¥ , hŒ¥, ht‚ü© := epsDeltaBoundAtT‚ÇÄ

  -- let t‚ÇÅ be the a time the path is not on the y-axis
  -- t‚ÇÅ is in (t‚ÇÄ, t‚ÇÄ + Œ¥]
  -- hence t‚ÇÅ > t‚ÇÄ
  -- hence xcoord(p(t‚ÇÅ)) > 0
  -- this is terrible
  have t‚ÇÄ_lt_one : t‚ÇÄ < 1 := by
    apply lt_of_le_of_ne
    ¬∑ exact unitInterval.le_one t‚ÇÄ
    ¬∑ intro h_eq_one
      have w_x_path : xcoordPath 1 = w_x := by
        simp only [xcoordPath, Function.comp_apply]
        rw [hPath.target]
        simp only [w, sinCurve, w_x, Prod.fst]
      have w_x_pos : w_x > 0 := by
        unfold w_x
        norm_num
      have x_eq_zero : xcoordPath 1 = 0 := by
        rw [h_eq_one] at h_t‚ÇÄ_mem
        exact h_t‚ÇÄ_mem
      rw [w_x_path] at x_eq_zero
      exact ne_of_gt w_x_pos x_eq_zero
  have Existt‚ÇÅGet‚ÇÄ : ‚àÉ t‚ÇÅ:unitInterval, t‚ÇÅ > t‚ÇÄ  ‚àß dist t‚ÇÄ t‚ÇÅ < Œ¥ := by
    let s0 := (t‚ÇÄ : ‚Ñù ) -- t‚ÇÄ is in unitInterval
    let s1 := min (s0 + Œ¥/2) 1
    have s_0Delta : s0 + Œ¥/2 > 0 := by
      apply add_pos_of_nonneg_of_pos
      ¬∑ exact unitInterval.nonneg t‚ÇÄ
      ¬∑ exact div_pos hŒ¥ (by norm_num)

    have hs1 : s1 ‚â• 0 := by
      have h1 : (0 : ‚Ñù) ‚â§ s0 + Œ¥/2 := le_of_lt s_0Delta
      have h2 : (0 : ‚Ñù) ‚â§ (1 : ‚Ñù) := by norm_num
      have : (0 : ‚Ñù) ‚â§ min (s0 + Œ¥/2) 1 := le_min h1 h2
      simpa [s1] using this

    have h': s1 ‚â§ 1 := by
      apply min_le_right


    use ‚ü®s1, hs1, h'‚ü©
    have dist_case : dist t‚ÇÄ ‚ü®s1, hs1, h'‚ü© < Œ¥ := by
      simp_all [z, w, s1, w_x, hPath, xcoordPath, A, t‚ÇÄ, s0]
      refine Metric.mem_ball.mp ?_

      sorry
    constructor
    ¬∑ simp only [gt_iff_lt, s1,s0, hPath, xcoordPath,‚Üê Subtype.coe_lt_coe, Subtype.coe_mk]
      apply lt_min
      ¬∑ exact (lt_add_iff_pos_right _).mpr (half_pos hŒ¥)
      ¬∑ exact t‚ÇÄ_lt_one
    ¬∑ simp only [dist_eq_norm, s1, s0, ‚Üê Subtype.coe_mk]
      exact dist_case

  obtain ‚ü®t‚ÇÅ, ht‚ÇÅ‚ü© := Existt‚ÇÅGet‚ÇÄ

  --- let a = xcoordPath t‚ÇÅ > 0
  let a :=  xcoordPath t‚ÇÅ
  have ha : a > 0 := by
    unfold a xcoordPath
    have h_pathT‚ÇÅ : hPath t‚ÇÅ ‚àà S := by

      sorry
    have h_pathT‚ÇÅ_x_pos : (hPath t‚ÇÅ).1 > 0 := by
      obtain ‚ü®x, hxI, hx_eq‚ü© := h_pathT‚ÇÅ
      dsimp [PosReal] at hxI
      rw [‚Üê hx_eq]
      exact (Set.mem_Ioi.mp hxI)
    exact h_pathT‚ÇÅ_x_pos



  --The image x(p([t0, t1])) is connected
  let intervalT‚ÇÄT‚ÇÅ := Set.Icc t‚ÇÄ t‚ÇÅ

  have xcoordPathOfT‚ÇÄT‚ÇÅConn:
      IsConnected (xcoordPath '' intervalT‚ÇÄT‚ÇÅ) := by
    have hConn : IsConnected intervalT‚ÇÄT‚ÇÅ := by
      unfold intervalT‚ÇÄT‚ÇÅ
      refine isConnected_Icc ?_
      ¬∑ exact le_of_lt ht‚ÇÅ.1
    have hCont : ContinuousOn xcoordPath intervalT‚ÇÄT‚ÇÅ := by
      apply xcoordPathContinuous.continuousOn

    exact hConn.image _ hCont

  -- and contains 0 = x(p(t‚ÇÄ)) and a = x(p(t‚ÇÅ))
  let zero :=  xcoordPath t‚ÇÄ

  have leftEnd :
      zero ‚àà ( xcoordPath '' intervalT‚ÇÄT‚ÇÅ) := by
      use t‚ÇÄ
      constructor
      ¬∑ simp only [intervalT‚ÇÄT‚ÇÅ, Set.mem_Icc]
        constructor
        ¬∑ exact le_refl t‚ÇÄ
        ¬∑ exact le_of_lt ht‚ÇÅ.1
      ¬∑ rfl

  have rightEnd :
      a ‚àà ( xcoordPath '' intervalT‚ÇÄT‚ÇÅ) := by
      use t‚ÇÅ
      constructor
      ¬∑ simp only [intervalT‚ÇÄT‚ÇÅ, Set.mem_Icc]
        constructor
        ¬∑ exact le_of_lt ht‚ÇÅ.1
        ¬∑ exact le_refl t‚ÇÅ
      ¬∑ rfl

  --and every connected subset of R is an interval, so
  -- (3.3) [0, a] ‚äÇ x(p([t0, t1])).
  let intervalAZero := Set.Icc zero a
  have intervalAZeroSubOfT‚ÇÄT‚ÇÅXcoord : intervalAZero ‚äÜ xcoordPath '' intervalT‚ÇÄT‚ÇÅ := by sorry

  --let x_SeqPosPeak a sequence of x-values where sin(1/x) = 1
  -- i.e. for any k ‚àà ‚Ñï , sin(1/x_SeqPosPeak(k)) = 1
  -- x_SeqPosPeak converges to 0 as k ‚Üí ‚àû
  -- thus there are some indicies i for wich x_SeqPosPeak i is in [0, a]

  have existsSeqInInterval : ‚àÉ i : ‚Ñï, x_SeqPosPeak i ‚àà intervalAZero := by
    have h_conv := Metric.tendsto_nhds.mp xSeq_tendsto_zero (a/2) (by positivity)
    obtain ‚ü®N, hN‚ü© := Filter.eventually_iff_exists_mem.mp h_conv

    -- obtain ‚ü®i‚ÇÄ, hi‚ÇÄ‚ü© := hN.1
    sorry

  -- Now we can show that there exists s‚ÇÅ in [t‚ÇÄ, t‚ÇÅ] ‚äÜ [t‚ÇÄ, t‚ÇÄ + Œ¥) such that:
  -- 1. hPath(s‚ÇÅ) = (*,1)
  have h_Path_s‚ÇÅ :  ‚àÉ s‚ÇÅ ‚àà intervalT‚ÇÄT‚ÇÅ, (hPath s‚ÇÅ).2 = (1) := by

    obtain ‚ü®i, hi‚ü© := existsSeqInInterval
    have i_ge_one : i ‚â• 1 := by sorry
    obtain ‚ü®s‚ÇÅ, hs‚ÇÅ‚ü© := intervalAZeroSubOfT‚ÇÄT‚ÇÅXcoord hi
    use s‚ÇÅ
    constructor
    ¬∑ exact hs‚ÇÅ.1
    ¬∑ have : (hPath s‚ÇÅ).2 = Real.sin ((x_SeqPosPeak i)‚Åª¬π) := by
        sorry
      rw [this]
      exact h_SinPosPeak i i_ge_one


  have h_PathContradiction : False := by

    obtain ‚ü®x‚ÇÅ, hx‚ÇÅ, hPathx‚ÇÅ‚ü© := h_Path_s‚ÇÅ


    -- let s0 := (t‚ÇÄ : ‚Ñù ) -- t‚ÇÄ is in unitInterval
    -- have h_le_one : (t‚ÇÄ : ‚Ñù) + Œ¥ ‚â§ 1 := by
    --   -- Proof that t‚ÇÄ + Œ¥ ‚â§ 1 goes here
    --   -- For example, if you know Œ¥ ‚â§ 1 - t‚ÇÄ
    --   sorry

    -- let t‚ÇÄDelta : unitInterval := ‚ü®(t‚ÇÄ : ‚Ñù) + Œ¥, by {
    --   constructor
    --   ¬∑ exact add_nonneg (unitInterval.nonneg t‚ÇÄ) (le_of_lt hŒ¥)
    --   ¬∑ exact h_le_one
    -- }‚ü©

    -- have intervalT‚ÇÄT‚ÇÅInDelta : intervalT‚ÇÄT‚ÇÅ ‚äÜ  Set.Ico t‚ÇÄ t‚ÇÄDelta := by
    --   intro x hx
    --   simp only [intervalT‚ÇÄT‚ÇÅ, Set.mem_Icc] at hx
    --   simp only [Set.mem_Ico]
    --   constructor
    --   ¬∑ exact hx.1
    --   ¬∑ apply lt_of_le_of_lt hx.2
    --     simp only [‚Üê Subtype.coe_lt_coe, Subtype.coe_mk]
    --     apply lt_of_lt_of_le
    --     ¬∑ exact (lt_add_iff_pos_right _).mpr hŒ¥
    --     ¬∑ Existt‚ÇÅGet‚ÇÄ.2

    have x‚ÇÅ_close_to_t‚ÇÄ : dist x‚ÇÅ t‚ÇÄ < Œ¥ := by
      unfold intervalT‚ÇÄT‚ÇÅ at hx‚ÇÅ
      simp only [Set.mem_Icc] at hx‚ÇÅ
      have hx‚ÇÅDelta: ‚àÄ t ‚àà intervalT‚ÇÄT‚ÇÅ, dist t t‚ÇÄ < Œ¥ := by
        intro t ht
        simp only [Set.mem_Icc] at ht
         --apply ht.2 --not sure
        sorry
      apply hx‚ÇÅDelta
      ¬∑ exact hx‚ÇÅ


    have path_far : dist (hPath x‚ÇÅ) (hPath t‚ÇÄ) > 1/2 := by
      rw [hPathT‚ÇÄ]
      unfold z
      simp only [dist_eq_norm]
      have : ‚ÄñhPath x‚ÇÅ - (0, 0)‚Äñ ‚â• |(hPath x‚ÇÅ).2 - 0| := by
        exact norm_ge_abs_component_snd
      apply gt_of_ge_of_gt this
      simp only [hPathx‚ÇÅ]
      norm_num

    have path_close : dist (hPath x‚ÇÅ) (hPath t‚ÇÄ) < 1/2 := by
      apply ht
      exact x‚ÇÅ_close_to_t‚ÇÄ

    rw [hPathT‚ÇÄ] at path_close
    rw [hPathT‚ÇÄ] at path_far
    exact lt_asymm path_close path_far

  exfalso

  ¬∑ exact h_PathContradiction



-- def clsOfS := closure S

-- lemma TsubClsOfS : T ‚äÜ clsOfS := by
--   intro x hx
--   cases hx with
--   | inl hxS => exact subset_closure hxS
--   | inr hxZ =>
--       rw [hxZ]
--       let f :  ‚Ñï ‚Üí  ‚Ñù √ó ‚Ñù := fun n => ((n * Real.pi)‚Åª¬π, 0)
--       have hnMulpiAtTop : Tendsto (fun n : ‚Ñï => n* Real.pi) atTop atTop := by
--         apply Filter.Tendsto.atTop_mul_const'
--         ¬∑ exact Real.pi_pos
--         ¬∑ exact tendsto_natCast_atTop_atTop
--       have hf : Tendsto f atTop (ùìù (0, 0))  := by
--         apply Filter.Tendsto.prodMk_nhds
--         ¬∑ exact tendsto_inv_atTop_zero.comp hnMulpiAtTop
--         ¬∑ exact tendsto_const_nhds
--       have hf' : ‚àÄ·∂† n in atTop, f n ‚àà S := by
--         have hfInS : ‚àÄ n : ‚Ñï, 0 < n ‚Üí f n ‚àà S := by
--           intro n hn
--           use (n * Real.pi)‚Åª¬π
--           constructor
--           unfold PosReal
--           rw [Set.mem_Ioi]
--           ¬∑ apply inv_pos.mpr
--             apply mul_pos
--             ¬∑ exact Nat.cast_pos.mpr hn
--             ¬∑ exact Real.pi_pos
--           ¬∑ unfold f
--             calc sinCurve (n * Real.pi)‚Åª¬π =
--               ((n * Real.pi)‚Åª¬π, Real.sin ((n * Real.pi)‚Åª¬π)‚Åª¬π) := by rfl
--               _ = ((n * Real.pi)‚Åª¬π, Real.sin (n * Real.pi)) := by
--                   congr
--                   simp only [inv_inv]
--               _ = ((n * Real.pi)‚Åª¬π,0) := by
--                 congr
--                 apply Real.sin_nat_mul_pi
--         filter_upwards [eventually_gt_atTop 0] using hfInS
--       apply mem_closure_of_tendsto hf hf'



-- -- SineCurve is continuous and path-connected
-- lemma invFunIsContinuousOnPosReal : ContinuousOn (fun x : ‚Ñù => x‚Åª¬π) (PosReal) := by
--   apply ContinuousOn.inv‚ÇÄ
--   ¬∑ exact continuous_id.continuousOn
--   ¬∑ intro x hxIsInIoi
--     exact ne_of_gt hxIsInIoi

-- lemma sinWithinvFunIsContinuousOnPosReal : ContinuousOn (fun x : ‚Ñù => Real.sin (x‚Åª¬π)) (PosReal) := by
--   apply Real.continuous_sin.comp_continuousOn
--   ¬∑ exact invFunIsContinuousOnPosReal

-- lemma topoSinCurveIsContinuousOnPosReal : ContinuousOn (sinCurve) (PosReal) :=
--   ContinuousOn.prod_mk continuous_id.continuousOn sinWithinvFunIsContinuousOnPosReal

-- lemma posIntervalIsPathConnected : IsPathConnected (PosReal) := by
--   apply Convex.isPathConnected
--   ¬∑ exact convex_Ioi 0
--   ¬∑ use 1
--     unfold PosReal
--     simp

-- lemma SIsPathConn : IsPathConnected S := by
--   apply IsPathConnected.image'
--   ¬∑ exact posIntervalIsPathConnected
--   ¬∑ exact topoSinCurveIsContinuousOnPosReal

-- lemma SisConnected : IsConnected S := SIsPathConn.isConnected

-- lemma ZisConnected : IsConnected Z := isConnected_singleton

-- -- T is connected

-- theorem TisConnected : IsConnected T := by
--   apply IsConnected.subset_closure
--   ¬∑ exact SisConnected
--   ¬∑ tauto_set
--   ¬∑ exact TsubClsOfS
